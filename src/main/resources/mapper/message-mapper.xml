<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.dao.MessageMapper">

    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

<!--    即可能是发信人，又可能是收信人，所以是在子查询中是一个或的关系-->
    <select id="selectConversations" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        )
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectConversationCount" resultType="int">
        select count(m.maxid) from (
            select max(id) as maxid from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        ) as m
    </select>

    <select id="selectLetters" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectLetterCount" resultType="int">
        select count(id)
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
    </select>

<!--    别人发给我的我未读的-->
    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId!=null">
            and conversation_id = #{conversationId}
        </if>
    </select>
<!--再增加时id是自增的，我们声明id字段对应的属性是谁，这样就可以回填这个id的属性，对象里就能得到-->
    <insert id="insertMessage" parameterType="Message" keyProperty="id">
        insert into message(<include refid="insertFields"></include>)
        values(#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>

<!--    一旦跳到列表详情页，我们就要将未读的信息设置为已读-->
<!--    这里的ids是传入的参数，是在接口中传入的参数-->
<!--    为什么要用括号拼接，因为这是mysql中in的语法-->
    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

<!--    如何查询最新的数据这是我们学到的一个mysql写法-->
<!--   如果设计的id是自增的，那么我们就可以利用最大id使得我们是最新-->
    <select id="selectLastNotice" resultType="Message">
        select <include refid="selectFields"></include>
            from message
        where id in(
            select max(id) from message
            where status!=2
            and from_id=1
            and to_id=#{userId}
            and conversation_id=#{topic}
        )
    </select>

    <select id="selectNoticeCount" resultType="int">
        select count(id)
        from message
        where status!=2
          and from_id=1
          and to_id=#{userId}
          and conversation_id=#{topic}
    </select>

<!--    加入动态sql，将查询当个主题的未读数量与多个主题的放在一个sql中-->
    <select id="selectNoticeUnreadCount" resultType="int">
        select count(id)
        from message
        where status=0
          and from_id=1
          and to_id=#{userId}
          <if test="topic!=null">
              and conversation_id=#{topic}
          </if>
    </select>

    <select id="selectNotices" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where status!=2
        and from_id=1
        and to_id=#{userId}
        and conversation_id=#{topic}
        order by create_time desc
        limit #{offset}, #{limit}
    </select>

</mapper>